% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/restrict.R
\name{guardrails_restrict}
\alias{guardrails_restrict}
\title{Restrict column selection when applying a function}
\usage{
guardrails_restrict(
  .f,
  .dplyr_verb = c("arrange", "count", "filter", "group_by", "mutate", "summarise",
    "summarize"),
  .eval_f = TRUE,
  .default_guardrails = TRUE,
  ...
)
}
\arguments{
\item{.f}{Function which the output function will apply across multiple
columns of a data frame.}

\item{.dplyr_verb}{String. Name of a dplyr verb like \code{"mutate"} or
\code{"summarize"} that uses
\href{https://dplyr.tidyverse.org/articles/programming.html#data-masking}{data-masking},
and therefore works with \code{dplyr::across()}.}

\item{.eval_f}{Boolean. Should \code{.f} appear in the output function as its body
and arguments, rather than by name? Default is \code{TRUE}.}

\item{.default_guardrails}{Boolean. Should the guardrails guide selection by
default (of the output function's arguments named in \code{...})? Default is
\code{TRUE}.}

\item{...}{<\href{https://dplyr.tidyverse.org/reference/dplyr_tidy_select.html}{\code{tidy-select}}>
Any number of named tidy selections passed on to \code{.dplyr_verb}.}
}
\value{
A function that wraps \code{.dplyr_verb} to apply \code{.f} to any number of
columns in a data frame.
}
\description{
\code{guardrails_restrict()} takes a function \code{.f} and any number of
\href{https://dplyr.tidyverse.org/reference/dplyr_tidy_select.html}{tidy selections}.
It returns a function that selects columns from a data frame and applies
\code{.f} to them.

Selections must be named because the names become arguments of the output
function. They are Boolean and \code{TRUE} by default, so they restrict column
selection unless specified otherwise.
}
\examples{
iris <- tibble::as_tibble(iris)
my_guardrails_f <- guardrails_restrict(
  .f = function(x) x * 100,
  .dplyr_verb = "mutate",
  check_numeric = where(is.numeric)
)
my_guardrails_f(iris)
}
